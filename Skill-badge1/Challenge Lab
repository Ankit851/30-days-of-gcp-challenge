Create and Manage Cloud Resources: Challenge Lab

--------------------------------------------------

Challenge scenario

You have started a new role as a Junior Cloud Engineer for Jooli, Inc. You are expected to help manage the infrastructure at Jooli. 
Common tasks include provisioning resources for projects.

You are expected to have the skills and knowledge for these tasks, so step-by-step guides are not provided.

Some Jooli, Inc. standards you should follow:

Create all resources in the default region or zone, unless otherwise directed.

Naming normally uses the format team-resource; for example, an instance could be named nucleus-webserver1.

Allocate cost-effective resource sizes. Projects are monitored, and excessive resource use will result in the containing project's termination 
(and possibly yours), so plan carefully. 
This is the guidance the monitoring team is willing to share: unless directed, use f1-micro for small Linux VMs, 
and use n1-standard-1 for Windows or other applications, such as Kubernetes nodes.

Task 1 : Create a project jumphost instance (zone: us-east1-b) 

In order to achieve this task we have two ways 

1. GUI 
2. Command line Interface
 
(i) click on Compute engine that is present in the notification panel and then create virtual instances in that use N1 series and f1-micro as described in the challenge and then 
click create and you are done with your Creation of a Virtual instance

2. This is the Command line interface way 👇👇👇
gcloud compute instances create nucleus-jumphost \
          --network nucleus-vpc \
          --zone us-east1-b  \
          --machine-type f1-micro  \
          --image-family debian-9  \
          --image-project debian-cloud 
         
Task 2 : Create a Kubernetes service cluster ☸ ☸

1. Create a K8s cluster 

gcloud container clusters create nucleus-backend \
          --num-nodes 1 \
          --network nucleus-vpc \
          --region us-east1
          
2. Authenticate the credentials of a cluster
gcloud container clusters get-credentials nucleus-backend \
          --region us-east1
          
3. Create a new deployment and place the image name there as  provided in the challenge lab

kubectl create deployment hello-server \
          --image=gcr.io/google-samples/hello-app:2.0
         
4. Expose the deployment or application on port 8080 i.e Create a service
kubectl expose deployment hello-server \
          --type=LoadBalancer \
          --port 8080
          
Task 3: Set up an HTTP load balancer 👨‍💻 👨‍💻

---> Create the startup.sh file 
cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

----> Create an instance template 
cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

-----> Create a instance-group
gcloud compute instance-groups managed create web-server-group \
          --base-instance-name web-server \
          --size 2 \
          --template web-server-template \
          --region us-east1

----> Create a firewall rule to allow traffic (80/tcp)
gcloud compute firewall-rules create web-server-firewall \
          --allow tcp:80 \
          --network nucleus-vpc
          
 ----> Create a health check
 gcloud compute http-health-checks create http-basic-check
 
 
 ----> Create a target pool
 gcloud compute instance-groups managed \
          set-named-ports web-server-group \
          --named-ports http:80 \
          --region us-east1
          
----> Create a backend service
gcloud compute backend-services create web-server-backend \
          --protocol HTTP \
          --http-health-checks http-basic-check \
          --global
          
------> Attach the managed instance group
gcloud compute backend-services add-backend web-server-backend \
          --instance-group web-server-group \
          --instance-group-region us-east1 \
          --global
          
-------> Create a URL map
gcloud compute url-maps create web-server-map \
          --default-service web-server-backend
          
-------> and target the HTTP proxy to route requests to your URL map
gcloud compute target-http-proxies create http-lb-proxy \
          --url-map web-server-map
          
-----> Create a forwarding rule
gcloud compute forwarding-rules create http-content-rule \
        --global \
        --target-http-proxy http-lb-proxy \
        --ports 80
        
----> This is not required as such but yaa you can check it for checking forwarding-rules
gcloud compute forwarding-rules list
